// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sipho.visitor.Data;

#nullable disable

namespace sipho.visitor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620114606_sipho.visitor.v1")]
    partial class siphovisitorv1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("sipho.visitor.Models.Entities.ParkingEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("BillGenerated")
                        .HasColumnType("boolean");

                    b.Property<decimal>("CalculatedCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EntryTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExitTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalBillId")
                        .HasColumnType("text");

                    b.Property<bool>("IsFreeParking")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ParkingSpaceNumberDesc")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer");

                    b.HasKey("EventId");

                    b.HasIndex(new[] { "EntryTimestamp" }, "IX_parking_events_entrytime");

                    b.HasIndex(new[] { "ExitTimestamp" }, "IX_parking_events_exittime");

                    b.HasIndex(new[] { "VehicleTypeId" }, "IX_parking_events_vehicletypeid");

                    b.ToTable("parking_events", (string)null);
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("GivenNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SurNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("PersonId");

                    b.HasIndex("GenderId");

                    b.HasIndex(new[] { "DocumentId" }, "IX_people_DocumentId");

                    b.HasIndex(new[] { "DocumentTypeId" }, "IX_people_DocumentTypeId");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.PersonDocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex(new[] { "Name" }, "UIX_people_document_types_name")
                        .IsUnique();

                    b.ToTable("people_document_types", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            Code = "CC",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6980),
                            Name = "Cédula de Ciudadanía",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6980)
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            Code = "CE",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6988),
                            Name = "Cédula de Extranjería",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6988)
                        },
                        new
                        {
                            DocumentTypeId = 3,
                            Code = "NIT",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6989),
                            Name = "Número de Identificación Tributaria",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6989)
                        },
                        new
                        {
                            DocumentTypeId = 4,
                            Code = "PAS",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6990),
                            Name = "Pasaporte",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(6990)
                        });
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.PersonGenderType", b =>
                {
                    b.Property<int>("GenderTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GenderTypeId");

                    b.HasIndex(new[] { "Name" }, "UIX_people_gender_types_name")
                        .IsUnique();

                    b.ToTable("people_gender_types", (string)null);

                    b.HasData(
                        new
                        {
                            GenderTypeId = 1,
                            Code = "NO",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7786),
                            Name = "Prefiero no decir",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7787)
                        },
                        new
                        {
                            GenderTypeId = 2,
                            Code = "F",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7789),
                            Name = "Femenino",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7790)
                        },
                        new
                        {
                            GenderTypeId = 3,
                            Code = "M",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7790),
                            Name = "Masculino",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7791)
                        },
                        new
                        {
                            GenderTypeId = 4,
                            Code = "NB",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7792),
                            Name = "No Binario",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(7792)
                        });
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VehicleTypeId");

                    b.HasIndex(new[] { "Name" }, "UIX_vehicle_types_name")
                        .IsUnique();

                    b.ToTable("vehicle_types", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleTypeId = 1,
                            Code = "VEHI",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(8416),
                            Name = "Vehiculo",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(8416)
                        },
                        new
                        {
                            VehicleTypeId = 2,
                            Code = "MOTO",
                            CreatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(8419),
                            Name = "Motocicleta",
                            UpdatedAt = new DateTime(2025, 6, 20, 11, 46, 6, 378, DateTimeKind.Utc).AddTicks(8420)
                        });
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.VisitorEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EntryTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExitTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UnitNumberDesc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId");

                    b.HasIndex(new[] { "VisitorId" }, "IX_parking_events_visitorid");

                    b.HasIndex(new[] { "EntryTimestamp" }, "IX_visitor_events_entrytime");

                    b.HasIndex(new[] { "ExitTimestamp" }, "IX_visitor_events_exittime");

                    b.ToTable("visitor_events", (string)null);
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.ParkingEvent", b =>
                {
                    b.HasOne("sipho.visitor.Models.Entities.VisitorEvent", "VisitorEvent")
                        .WithOne("ParkingEntry")
                        .HasForeignKey("sipho.visitor.Models.Entities.ParkingEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sipho.visitor.Models.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");

                    b.Navigation("VisitorEvent");
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.Person", b =>
                {
                    b.HasOne("sipho.visitor.Models.Entities.PersonDocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sipho.visitor.Models.Entities.PersonGenderType", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.VisitorEvent", b =>
                {
                    b.HasOne("sipho.visitor.Models.Entities.Person", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("sipho.visitor.Models.Entities.VisitorEvent", b =>
                {
                    b.Navigation("ParkingEntry")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
